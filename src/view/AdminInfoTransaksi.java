/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

/**
 *
 * @author LENOVO
 */
import javax.swing.table.DefaultTableModel;
import config.koneksi;
import java.sql.Connection;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showConfirmDialog;
import static javax.swing.JOptionPane.showMessageDialog;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

public class AdminInfoTransaksi extends javax.swing.JPanel {

    /**
     * Creates new form AdminInfoTransaksi
     */
    private final Connection con;
    public AdminInfoTransaksi() {
        initComponents();
        
       con = koneksi.getConnection();
       setTableModel();
       loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransaksi = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfNama = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfAlamat = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfTelp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cbJenis = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbDurasi = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        cbMetode = new javax.swing.JComboBox<>();
        btnSimpan = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnCetak = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(881, 336));
        setLayout(new java.awt.CardLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(881, 336));

        tableTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableTransaksi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransaksiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTransaksi);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabel1.setText("Informasi Transaksi");

        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Nama");

        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Alamat");

        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("No. Telepon");

        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Jenis PC");

        cbJenis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entery Level", "Mid-Range", "High-End" }));
        cbJenis.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbJenisItemStateChanged(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Durasi Pinjam");

        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Total Biaya");

        cbDurasi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 Hari", "2 Hari", "3 Hari", "4 Hari", "5 Hari", "6 Hari", "7 Hari" }));
        cbDurasi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDurasiItemStateChanged(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Metode Pembayaran");

        cbMetode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COD", "Transfer Bank", "Shopee Pay", "OVO", "Go Pay" }));

        btnSimpan.setText("SIMPAN");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnUbah.setText("UBAH");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setText("HAPUS");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnCetak.setText("CETAK");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(tfNama)
                            .addComponent(jLabel3)
                            .addComponent(tfAlamat)
                            .addComponent(jLabel4)
                            .addComponent(tfTelp)
                            .addComponent(jLabel5)
                            .addComponent(cbJenis, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6)
                                    .addComponent(tfTotal)
                                    .addComponent(jLabel7)
                                    .addComponent(cbDurasi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8)
                                    .addComponent(cbMetode, 0, 146, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(btnCetak))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSimpan)
                        .addGap(18, 18, 18)
                        .addComponent(btnUbah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnHapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbDurasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMetode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbJenis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCetak))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSimpan)
                            .addComponent(btnUbah)
                            .addComponent(btnHapus)
                            .addComponent(btnClear)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        try {
        int selectedRow = tableTransaksi.getSelectedRow();

        if (selectedRow == -1) {
            // Jika tidak ada baris yang dipilih, tampilkan pesan kesalahan
            showMessageDialog(null, "Pilih baris yang akan diubah.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tableTransaksi.getModel();

        // Dapatkan nilai kolom dari baris yang dipilih
        String idTransaksi = model.getValueAt(selectedRow, 0).toString();
        String namaPeminjam = model.getValueAt(selectedRow, 1).toString();
        String alamatPeminjam = model.getValueAt(selectedRow, 2).toString();
        String noTelp = model.getValueAt(selectedRow, 3).toString();
        String jenisPC = model.getValueAt(selectedRow, 4).toString();
        String durasiPinjam = model.getValueAt(selectedRow, 5).toString();
        String totalHarga = model.getValueAt(selectedRow, 6).toString();
        String metodePembayaran = model.getValueAt(selectedRow, 7).toString();

        // TODO: Tampilkan nilai-nilai ini pada komponen input yang sesuai (JTextField, JComboBox, dll.)

        // Setelah mengisi nilai-nilai pada komponen input, Anda dapat melanjutkan dengan perubahan data di database.
        // Contoh:
           String query = "UPDATE transaksi SET nama_peminjam=?, alamat=?, no_telp=?, nama_pc=?, durasi_pinjam=?, total_biaya=?, metode_pembayaran=? WHERE transaksi_id=?";
           PreparedStatement ps = con.prepareStatement(query);
           ps.setString(1, tfNama.getText());
           ps.setString(2, tfAlamat.getText());
           ps.setString(3, tfTelp.getText());
           ps.setString(4, (String)cbJenis.getSelectedItem());
           ps.setString(5, (String)cbDurasi.getSelectedItem());
           ps.setString(6, tfTotal.getText());
           ps.setString(7, (String)cbMetode.getSelectedItem());
           ps.setString(8, idTransaksi);

           ps.executeUpdate();
            tfNama.setText("");
            tfAlamat.setText("");
            tfTelp.setText("");
            cbJenis.setSelectedIndex(0); // Mengosongkan JComboBox
            cbDurasi.setSelectedIndex(0); // Mengosongkan JComboBox
            tfTotal.setText("");
            cbMetode.setSelectedIndex(0); // Mengosongkan JComboBox
           showMessageDialog(null, "Data berhasil diubah.");
             // Setelah menyimpan, perbarui model tabel dan tampilkan data terbaru
             loadData(); // Memanggil metode loadData untuk memperbarui model tabel
             model.fireTableDataChanged(); // Memastikan tabel merender ulang data           
    } catch (Exception e) {
        System.out.println("Error!" + e.getMessage());
    }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
            try {
            Statement st = con.createStatement();
            if("".equals(tfNama.getText())){
                JOptionPane.showMessageDialog(new JFrame(), "Nama lengkap kosong", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }else if("".equals(tfAlamat.getText())){
                JOptionPane.showMessageDialog(new JFrame(), "Alamat Kosong", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }else if("".equals(tfTelp.getText())){
                JOptionPane.showMessageDialog(new JFrame(), "No.Telepon Kosong", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }else {
              
            String Nama = tfNama.getText(); 
            String Alamat= tfAlamat.getText();
            String Nomor = tfTelp.getText();
            String Jenis = (String)cbJenis.getSelectedItem();
            String Durasi = (String)cbDurasi.getSelectedItem();
            String total = tfTotal.getText();
            String metode = (String)cbMetode.getSelectedItem();
    
            
            String query = "INSERT INTO transaksi (nama_peminjam, alamat, no_telp, nama_pc,durasi_pinjam, total_biaya,metode_pembayaran)"+
                    "VALUES('"+Nama+"', '"+Alamat+"' , '"+Nomor+"', '"+Jenis+"', '"+Durasi+"', '"+total+"', '"+metode+"')";
            
            st.execute(query);
            
                tfNama.setText("");
                tfAlamat.setText("");
                tfTelp.setText("");
                cbJenis.setSelectedIndex(0); // Mengosongkan JComboBox
                cbDurasi.setSelectedIndex(0); // Mengosongkan JComboBox
                tfTotal.setText("");
                 cbMetode.setSelectedIndex(0); // Mengosongkan JComboBox
                 
            showMessageDialog(null, "Berhasil di simpan");
             // Setelah menyimpan, perbarui model tabel dan tampilkan data terbaru
             DefaultTableModel model = (DefaultTableModel) tableTransaksi.getModel();
             loadData(); // Memanggil metode loadData untuk memperbarui model tabel
             model.fireTableDataChanged(); // Memastikan tabel merender ulang data
            }
        }catch(Exception e){
           System.out.println("Error!" + e.getMessage()); 
        } 
    }//GEN-LAST:event_btnSimpanActionPerformed
    private void updateTotal() {
            String jenisItem = (String) cbJenis.getSelectedItem();
            String durasiItem = (String) cbDurasi.getSelectedItem();
            int baseTotal = 0;  // Nilai dasar tfTotal

            // Atur nilai dasar berdasarkan pilihan di cbJenis
             switch (jenisItem) {
             case "Entery Level":
               baseTotal = 100000;
              break;
            case "Mid-Range":
               baseTotal = 200000;
            break;
            case "High-End":
               baseTotal = 300000;
            break;
             // Tambahkan case sesuai dengan kebutuhan
             }

            // Atur nilai tambahan berdasarkan pilihan di cbDurasi
            int durasiIndex = cbDurasi.getSelectedIndex();  // Indeks dimulai dari 0
            int additionalTotal = durasiIndex > 0 ? durasiIndex * 100000 : 0;

            // Hitung total akhir
            int total = baseTotal + additionalTotal;

             // Set nilai pada tfTotal
            tfTotal.setText(Integer.toString(total));    
    }
    private void cbJenisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbJenisItemStateChanged
        updateTotal();
    }//GEN-LAST:event_cbJenisItemStateChanged

    private void cbDurasiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDurasiItemStateChanged
        updateTotal();
    }//GEN-LAST:event_cbDurasiItemStateChanged

    private void tableTransaksiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransaksiMouseClicked
     // Mendapatkan indeks baris yang diklik
    int selectedRow = tableTransaksi.getSelectedRow();

    // Memastikan baris yang dipilih adalah valid
    if (selectedRow != -1) {
        DefaultTableModel model = (DefaultTableModel) tableTransaksi.getModel();

        // Mendapatkan nilai dari setiap kolom pada baris yang dipilih
        String idTransaksi = model.getValueAt(selectedRow, 0).toString();
        String namaPeminjam = model.getValueAt(selectedRow, 1).toString();
        String alamatPeminjam = model.getValueAt(selectedRow, 2).toString();
        String noTelp = model.getValueAt(selectedRow, 3).toString();
        String jenisPC = model.getValueAt(selectedRow, 4).toString();
        String durasiPinjam = model.getValueAt(selectedRow, 5).toString();
        String totalHarga = model.getValueAt(selectedRow, 6).toString();
        String metodePembayaran = model.getValueAt(selectedRow, 7).toString();

        // Menampilkan nilai-nilai tersebut pada JTextField dan JComboBox
        
        tfNama.setText(namaPeminjam);
        tfAlamat.setText(alamatPeminjam);
        tfTelp.setText(noTelp);
        cbJenis.setSelectedItem(jenisPC);
        cbDurasi.setSelectedItem(durasiPinjam);
        tfTotal.setText(totalHarga);
        cbMetode.setSelectedItem(metodePembayaran);
    }
    }//GEN-LAST:event_tableTransaksiMouseClicked

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
       try {
        int selectedRow = tableTransaksi.getSelectedRow();

        if (selectedRow == -1) {
            // Jika tidak ada baris yang dipilih, tampilkan pesan kesalahan
            showMessageDialog(null, "Pilih baris yang akan dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tableTransaksi.getModel();
        String idTransaksi = model.getValueAt(selectedRow, 0).toString();

        // Konfirmasi pengguna untuk menghapus data
        int response = showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        
        if (response == JOptionPane.YES_OPTION) {
            // Hapus data dari tabel
            model.removeRow(selectedRow);

            // Hapus data dari database
            String query = "DELETE FROM transaksi WHERE transaksi_id=?";
            try (PreparedStatement ps = con.prepareStatement(query)) {
                ps.setString(1, idTransaksi);
                ps.executeUpdate();
                showMessageDialog(null, "Data berhasil dihapus.");
            //CLEAR
            tfNama.setText("");
            tfAlamat.setText("");
            tfTelp.setText("");
            cbJenis.setSelectedIndex(0); // Mengosongkan JComboBox
            cbDurasi.setSelectedIndex(0); // Mengosongkan JComboBox
            tfTotal.setText("");
            cbMetode.setSelectedIndex(0); // Mengosongkan JComboBo
            }
        }
    } catch (Exception e) {
        System.out.println("Error!" + e.getMessage());
    }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        tfNama.setText("");
        tfAlamat.setText("");
        tfTelp.setText("");
        cbJenis.setSelectedIndex(0); // Mengosongkan JComboBox
        cbDurasi.setSelectedIndex(0); // Mengosongkan JComboBox
        tfTotal.setText("");
        cbMetode.setSelectedIndex(0); // Mengosongkan JComboBox
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
        try {

            // Load report design (file .jasper)
            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(getClass().getResource("/report/reportTransaksi.jasper"));

            // Set parameter jika diperlukan
            Map<String, Object> parameters = new HashMap<>();

            // Mengisi laporan menggunakan JasperFillManager
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, con);

            // Menampilkan laporan menggunakan JasperViewer
            JasperViewer.viewReport(jasperPrint, false);

        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCetakActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUbah;
    private javax.swing.JComboBox<String> cbDurasi;
    private javax.swing.JComboBox<String> cbJenis;
    private javax.swing.JComboBox<String> cbMetode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTransaksi;
    private javax.swing.JTextField tfAlamat;
    private javax.swing.JTextField tfNama;
    private javax.swing.JTextField tfTelp;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables
    
    private void loadData() {
       getData((DefaultTableModel)tableTransaksi.getModel());     
    }
    
    private void setTableModel() {
        DefaultTableModel model = (DefaultTableModel) tableTransaksi.getModel();
        model.addColumn("ID Transaksi");
        model.addColumn("Nama");
        model.addColumn("Alamat");
        model.addColumn("No.Telp");
        model.addColumn("Jenis PC");
        model.addColumn("Durasi Pinjam");
        model.addColumn("Total Harga");
        model.addColumn("Metode Pembayaran"); 
    }

    private void getData(DefaultTableModel model) {
                model.setRowCount(0);
        
        try {
            String sql = "SELECT * FROM transaksi";
            try (PreparedStatement st = con.prepareStatement(sql)){
              ResultSet rs = st.executeQuery();
              
                while (rs.next()) {
                    String idTransaksi = rs.getString("transaksi_id");
                    String namaPeminjam = rs.getString("nama_peminjam");
                    String alamatPeminjam = rs.getString("alamat");
                    String noTelp = rs.getString("no_telp");
                    String jenisPC = rs.getString("nama_pc");
                    String durasiPinjam = rs.getString("durasi_pinjam");
                    String totalHarga = rs.getString("total_biaya");
                    String metodePembayaran = rs.getString("metode_pembayaran");
                    
                    Object[]rowData ={idTransaksi,namaPeminjam,alamatPeminjam,noTelp,jenisPC,durasiPinjam,totalHarga,metodePembayaran};
                    model.addRow(rowData);
                }
            } 
        } catch (SQLException e) {
            Logger.getLogger(AdminInfoTransaksi.class.getName()).log(Level.SEVERE,null,e);
        }
    }
}
